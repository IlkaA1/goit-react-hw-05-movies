{"version":3,"file":"static/js/740.7686939d.chunk.js","mappings":"8SAEMA,EAAU,mCAEHC,EAAU,mCAAG,oGACDC,EAAAA,EAAAA,IAAA,gEACoCF,EADpC,oBADC,cAClBG,EADkB,yBAIjBA,GAJiB,2CAAH,qDAOVC,EAAsB,mCAAG,WAAMC,GAAN,uFACbH,EAAAA,EAAAA,IAAA,6CACiBG,EADjB,oBAC+BL,EAD/B,oBADa,cAC9BG,EAD8B,gBAIvBA,EAJuB,mFAAH,sDAOtBG,EAAS,mCAAG,WAAMD,GAAN,uFACAH,EAAAA,EAAAA,IAAA,6CACiBG,EADjB,4BACuCL,EADvC,oBADA,cACjBG,EADiB,yBAKhBA,GALgB,2CAAH,sDAQTI,EAAY,mCAAG,WAAMF,GAAN,uFACHH,EAAAA,EAAAA,IAAA,6CACiBG,EADjB,4BACuCL,EADvC,oBADG,cACpBG,EADoB,yBAKnBA,GALmB,2CAAH,sDAQZK,EAAe,mCAAG,WAAMC,GAAN,uFACNP,EAAAA,EAAAA,IAAA,0DAC8BO,EAD9B,oBACgDT,EADhD,oBADM,cACvBG,EADuB,yBAKtBA,GALsB,2CAAH,qD,sICjC5B,GAAgB,MAAQ,oBAAoB,WAAa,0B,2BCkDzD,EA7Ca,WACX,OAAyBO,EAAAA,EAAAA,YAAzB,eAAOC,EAAP,KAAcC,EAAd,KACQC,GAAWC,EAAAA,EAAAA,MAAXD,OAkBR,OAhBAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAQ,mCAAG,WAAMH,GAAN,iGAEPP,EAAAA,EAAAA,GAAUO,GAAQI,MAAK,SAAAC,GAC3BN,EAAQM,EAAIC,KAAKC,KAClB,IAJY,sDAKJC,EALI,KAKJA,MACTC,IAAAA,OAAAA,QAAwBD,GANX,wDAAH,sDAUVR,GACFG,EAASH,EAEZ,GAAE,CAACA,KAGF,gBAAKU,UAAWC,EAAAA,YAAhB,SACGb,IACC,eAAIY,UAAWC,EAAAA,MAAf,SACGb,EAAMc,KAAI,SAAAL,GAAI,OACb,gBAAkBG,UAAWC,EAAAA,WAA7B,WACE,gBACEE,MAAM,MACNC,IACEP,EAAKQ,aAAL,0CACuCR,EAAKQ,cACxC,wEAENC,IAAKT,EAAKU,QAEZ,wBAAKV,EAAKU,QACV,wCAAgBV,EAAKW,eAXdX,EAAKf,GADD,OAmBxB,C","sources":["api.js","webpack://react-homework-template/./src/components/Cast/cast.module.css?8374","components/Cast/Cast.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = '8ba51ca9b1ac445c77c0779168705c6a';\n\nexport const apiReesult = async () => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/trending/all/day?api_key=${API_KEY}&language=en-US`\n  );\n  return response;\n};\n\nexport const fetchArticlesWithQuery = async id => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${id}?api_key=${API_KEY}&language=en-US`\n  );\n  return await response;\n};\n\nexport const fetchCast = async id => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n  );\n\n  return response;\n};\n\nexport const fetchReviews = async id => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${id}/reviews?api_key=${API_KEY}&language=en-US`\n  );\n\n  return response;\n};\n\nexport const fetchSearchFilm = async search => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/search/movie?query=${search}&api_key=${API_KEY}&language=en-US`\n  );\n\n  return response;\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"acter\":\"cast_acter__DEsIn\",\"acterCards\":\"cast_acterCards__uVbaa\"};","import { useParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { fetchCast } from 'api';\nimport css from './cast.module.css';\nimport Notiflix from 'notiflix';\n\nconst Cast = () => {\n  const [casts, setCast] = useState();\n  const { filmId } = useParams();\n\n  useEffect(() => {\n    const fetchApi = async filmId => {\n      try {\n        await fetchCast(filmId).then(res => {\n          setCast(res.data.cast);\n        });\n      } catch ({ error }) {\n        Notiflix.Notify.failure(error);\n      }\n    };\n\n    if (filmId) {\n      fetchApi(filmId);\n    }\n  }, [filmId]);\n\n  return (\n    <div className={css.ulContainer}>\n      {casts && (\n        <ul className={css.acter}>\n          {casts.map(cast => (\n            <li key={cast.id} className={css.acterCards}>\n              <img\n                width=\"100\"\n                src={\n                  cast.profile_path\n                    ? `https://image.tmdb.org/t/p/w500/${cast.profile_path}`\n                    : 'https://sahagroupfair.com/assets/frontend/img/image-not-available.png'\n                }\n                alt={cast.name}\n              ></img>\n              <h2>{cast.name}</h2>\n              <h2>Character: {cast.character}</h2>\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nexport default Cast;\n"],"names":["API_KEY","apiReesult","axios","response","fetchArticlesWithQuery","id","fetchCast","fetchReviews","fetchSearchFilm","search","useState","casts","setCast","filmId","useParams","useEffect","fetchApi","then","res","data","cast","error","Notiflix","className","css","map","width","src","profile_path","alt","name","character"],"sourceRoot":""}